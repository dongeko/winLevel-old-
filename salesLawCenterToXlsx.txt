XLSX = require('xlsx')

salesLawCenterXlsx = (totals, product) ->
  _(totals).toArray()
    .map (product) ->
      1: TAPi18n.__ "productNames.#{product.product}", {}, 'ru'
      2: product.product
      3: product.group
      4: product.price
      5: product.success
      6: product.undo
    .sort (a, b) ->
      if a['2'].toUpperCase() < b['2'].toUpperCase()
        return -1
      else if a['2'].toUpperCase() > b['2'].toUpperCase()
        return 1
      return 0

Meteor.methods
  salesLawCenterToXlsx: (dateStart, dateEnd) ->
    sd = moment(dateStart).toDate()
    fd = moment(dateEnd).toDate()
    products = db.products.find({group:"ARK"}).fetch()
    totals = {}
    
    for product in products
      successSales = db.sales.find(
        status:
          $ne: 'undo'
        'product._id': product._id
        createdAt:
          $gte: sd
          $lt: fd
      ).fetch()
      undoSales = db.sales.find(
        status: 'undo'
        'product._id': product._id
        updatedAt:
          $gte: sd
          $lt: fd
      ).fetch()

      suc = successSales.length
      und = undoSales.length

      if product.name
        if (suc + und > 0) or (product.status != 'disabled')
          if totals[product.name]
            totals[product.name].success += suc
            totals[product.name].undo += und
          else
            totals[product.name] =
              product: product.name
              group: product.group
              name: product.name
              price: product.price
              success: suc
              undo: und
    sales = successSales.concat(undoSales)
    users = []
    sales.forEach (i) ->
      date = moment(i?.product?.buyDate).format('DD.MM.YY')
      info=
        1:i?.buyer
        2:i?.product?.name
        3:TAPi18n.__ "productNames.#{i.product.name}", {}, 'ru'
        4:date
      users.push info

    headUser = [
      { 
        1: 'ID покупателя'
        2: 'Имя в базе'
        3: 'Продукт'
        4: 'Дата покупки'
      }
    ]
    
    total = salesLawCenterXlsx(totals, product)
    headProd = [
      {
        1: 'Продукт'
        2: 'Имя в базе'
        3: 'Группа'
        4: 'Стоимость'
        5: 'Покупок'
        6: 'Возвратов'
      }
    ]

    arrProd = headProd.concat(users)
    arrUser = headUser.concat(users)

    sDateFormat = moment(sd).format('DD.MM.YY')
    fDateFormat = moment(fd).format('DD.MM.YY')
    currentMoment = moment().format('DD.MM.YYYY_HH:mm:ss')
    title = "Продажи_с_#{sDateFormat}_по_#{fDateFormat}_(#{currentMoment})"

    ws_name = "SheetJS"
    ws = XLSX.utils.aoa_to_sheet([["Продукт", "Имя в базе", "Группа", "Стоимость", "Покупок", "Возвратов"]])
    XLSX.utils.sheet_add_json(ws, total, {skipHeader: true, origin: "A2"})
    wb = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(wb, ws, "Sheet JS")
    wb